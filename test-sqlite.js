// SQLite Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
import sqlite3 from 'sqlite3';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Testing SQLite connection...');

const dbPath = path.join(__dirname, 'data', 'test.db');
console.log(`Database path: ${dbPath}`);

const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå SQLite connection failed:', err.message);
    process.exit(1);
  } else {
    console.log('‚úÖ SQLite connection successful!');
    
    // Í∞ÑÎã®Ìïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    db.run(`CREATE TABLE IF NOT EXISTS test (
      id INTEGER PRIMARY KEY,
      message TEXT
    )`, (err) => {
      if (err) {
        console.error('‚ùå Table creation failed:', err.message);
      } else {
        console.log('‚úÖ Test table created!');
        
        // ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
        db.run('INSERT INTO test (message) VALUES (?)', ['Hello SQLite!'], (err) => {
          if (err) {
            console.error('‚ùå Data insertion failed:', err.message);
          } else {
            console.log('‚úÖ Test data inserted!');
            
            // Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
            db.get('SELECT * FROM test ORDER BY id DESC LIMIT 1', (err, row) => {
              if (err) {
                console.error('‚ùå Data query failed:', err.message);
              } else {
                console.log(`‚úÖ Query result: ${row.message}`);
              }
              
              db.close((err) => {
                if (err) {
                  console.error('‚ùå Database close failed:', err.message);
                } else {
                  console.log('‚úÖ Database connection closed');
                }
                process.exit(0);
              });
            });
          }
        });
      }
    });
  }
});